@model VisitViewModel

@{
    double totalPrice = Model.RepairActivities.Sum(x => x.Price);
    double discount = Model.Discount;
    var status = Model.Status;
    var rating = Model.Rating;
}

<div class="d-flex justify-content-between flex-column bg-light bg-opacity-50 shadow p-3" style="height:96%">

    <div class="d-flex flex-column justify-content-start" style="height:100%;">

        <div class="d-flex flex-row p-2 justify-content-between">
            <div class="d-flex flex-column align-items-start gap-1">
                <div class="bg-secondary rounded-pill text-light py-2 px-3 gap-4">
                    <b>
                        @status -
                    </b>
                    (@Model.VehicleYear) @Model.VehicleBrand @Model.VehicleModel
                </div>
                <div class="d-flex text-start col">
                </div>
                <div class="ms-3">
                    @Model.UserName
                </div>
                <div class="col-2 ms-3 text-end">
                    @Model.DateCreated.ToShortDateString()
                </div>
            </div>
            <div class="d-flex row me-0">
                @if (status == "Paid")
                {
                    <div class="d-flex flex-column align-items-end">
                        <div class="d-flex btn-secondary rounded-pill mb-2 px-4 py-1">
                            <select id="rating-dropdown" class="dropdown btn btn-secondary dropdown-toggle mx-1">
                                <option> 1 </option>
                                <option> 2 </option>
                                <option> 3 </option>
                                <option> 4 </option>
                                <option> 5 </option>
                            </select>
                            <img src="~/images/star-icon.png" id="rating-icon" style="width:36px; height:36px;" hidden />
                        </div>
                    </div>
                    <a asp-area="" asp-controller="Visits" asp-action="DownloadPdf" asp-route-visitId="@Model.Id" class="d-flex btn btn-primary flex-grow-0 justify-content-end">
                        Download PDF
                    </a>
                }
            </div>
        </div>

        <hr />

        <div class="d-flex flex-column justify-content-start mt-2" style="overflow-y: hidden;">

            <!-- Repair Activities Container -->
            <div id="" class="d-flex flex-column justify-content-start my-auto px-3 py-3 gap-3 repair-activities-container" style="overflow-y: auto;">

                <!-- List Repair Activities -->
                @foreach (var repairActivity in Model.RepairActivities)
                {
                    var item = repairActivity;

                    <div id="" class="d-flex flex-row justify-content-between repair-activity-entry">
                        <div class="d-flex gap-4 text-end" style="width:80%">

                            <div class="d-flex align-self-center justify-content-center align-items-center bg-success text-light rounded-circle" style="width:14px; height:14px;"></div>

                            @* Repair Activities Type *@
                            <div id="" class="d-flex align-items-center repair-activity-id" style="min-width:20px;" data-id="@item.Id">@item.Name.</div>
                        </div>

                        @* Repair Activities Price *@
                        <div class="d-flex bg-light pe-1 row rounded">
                            <input id="price-field" class="d-flex form-control me-3 repair-activity-price" type="number" readonly autocomplete="off" value="@item.Price" style="width:100px;" />
                            <div class="d-flex flex-row justify-content-center align-items-center pe-4" style="width:20px;"> ЛВ.</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="d-flex flex-column justify-content-between">
        <div class="d-flex flex-column bg-secondary bg-opacity-50 rounded m-2 py-3 text-light">

            @{
                if (@discount != 0)
                {
                    <div class="d-flex flex-row mx-5">
                        <div class="d-flex col gap-4 text-end">
                            <label class="d-flex m-0">Discount</label>
                        </div>
                        <div class="d-flex flex-column flex-stretch m-0">
                            <p id="" class="badge bg-info px-4 py-2 row text-end">-@discount%</p>
                        </div>
                    </div>
                }
            }

            <div class="d-flex flex-row mx-5">
                <div class="d-flex col gap-4 text-end">
                    <label class="d-flex m-0">Total Price</label>
                </div>

                <div class="d-flex flex-row gap-5 m-0">
                    @{
                        if (@discount != 0)
                        {
                            <s id="total-price-original" class="row text-end">@totalPrice ЛВ.</s>
                        }
                    }
                    <label id="total-price" class="row text-end">@totalPrice ЛВ.</label>

                    <div class="d-flex flex-column align-items-end">
                        <select id="currency-toggle" class="d-flex flex-fill dropdown btn btn-secondary dropdown-toggle mx-0">
                            <option> BGN </option>
                            <option> USD </option>
                            <option> EUR </option>
                        </select>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>

    $(document).ready(function () {

        let visitDate = @Html.Raw(Json.Serialize(Model.DateCreated.ToString("yyyy-MM-dd")));

        /**
         *  Rating
         */

        let initialRating = @Html.Raw(Json.Serialize(rating));

        let ratingDropdown = $('#rating-dropdown');

        console.log(initialRating);

        if (initialRating != '0') {
            ratingDropdown.val(initialRating);
            $('#rating-icon').removeAttr('hidden');
        }
        else {
            let notRatedOption = $('<option>', { text: 'Not Rated' });
            ratingDropdown.prepend(notRatedOption);
            ratingDropdown.val('Not Rated');
        }

        ratingDropdown.change(function () {

            let selectedRatingValue = $(this).val();

            if (selectedRatingValue != 'Not Rated') {

                let visitId = @Html.Raw(Json.Serialize(@Model.Id));
                var actionUrl = '/Visits/UpdateVisitRating?visitId=' + visitId + '&rating=' + selectedRatingValue;

                $.ajax({
                    url: actionUrl,
                    type: 'POST',
                    success: function () {
                        console.log('Rating updated to ', selectedRatingValue);
                        if (ratingDropdown.find('option:first').text() === 'Not Rated') {
                            ratingDropdown.find('option:first').remove();
                        }
                        $('#rating-icon').removeAttr('hidden');
                    },
                    error: function () {
                        console.log('Error updating rating to ', selectedRatingValue);
                    }
                });
            }
            else {
                $('#rating-icon').attr('hidden', 'hidden');
            }

        });

        /**
         *  Currency
         */

        // Parse discount value to js
        let discountValue = @Html.Raw(Json.Serialize(discount));

        let totalPrice = 0.0;
        let discount = (100.0 - discountValue) / 100;

        // Set initial total price
        calTotalPrice();

        function calTotalPrice() {
            totalPrice = 0;

            // Loop through all input fields with IDs starting with 'price-field-'
            $('[id^="price-field"]').each(function () {
                // Extract the numeric value from the input field
                let fieldValue = parseFloat($(this).val()) || 0;

                // Add the numeric value to the total price
                totalPrice += fieldValue;
            });

            if (discountValue) {
                $('#total-price-original').text(totalPrice.toFixed(2) + ' ЛВ.');
                $('#total-price').text((totalPrice * discount).toFixed(2) + ' ЛВ.')
            }
            else {
                $('#total-price').text(totalPrice.toFixed(2) + ' ЛВ.');
            }
        }

        $('#currency-toggle').change(function () {

            let selectedCurrency = $(this).val();

            //
            let date = visitDate;
            let baseCurrency = "BGN";
            let targetCurrency = selectedCurrency;

            if (targetCurrency != baseCurrency) {

                // Frankfurter API endpoint for historical exchange rates
                let apiUrl = "https://api.frankfurter.app/" + date + "?from=" + baseCurrency + "&to=" + targetCurrency;

                $.ajax({
                    url: apiUrl,
                    type: "GET",
                    success: function (response) {

                        let exchangeRate = response.rates[targetCurrency];
                        let price = (totalPrice * exchangeRate).toFixed(2);

                        if (discountValue) {

                            $('#total-price-original').text(targetCurrency + ' ' + price);
                            $('#total-price').text(targetCurrency + ' ' + (price * discount));
                        }
                        else {
                            $('#total-price').text(targetCurrency + ' ' + price);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error: Unable to fetch exchange rates. Status: " + status + ", Error: " + error);
                    }
                });
            }
            else {
                calTotalPrice();
            }

        });
    });

</script>