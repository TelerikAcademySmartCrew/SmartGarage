@model RegisterVehicleViewModel

@{
    var userName = ViewData["CurrentUser"];
    var brands = Model.Brands;
}

<!-- customer index page -->
<div class="d-flex flex-column justify-content-start" style="height:100%;">

    <!-- customer nav bar -->
    <partial name="_EmployeeNavBarPartial" model="@userName" />


    <div class="d-flex flex-column justify-items-between justify-content-end bg-light py-2">
        <div class="d-flex container justify-content-between">

            <div class="d-flex flex-row align-items-center gap-3">
                <a asp-area="Employee" asp-controller="Home" asp-action="Index" class="btn btn-secondary rounded-pill">
                    BACK
                </a>
                <p class="lead my-2">
                    REGISTER <b>VEHICLE</b>
                </p>
            </div>
        </div>
    </div>


    <!-- Brands and models dynamic container -->
    <div id="matchingNames" class="dynamicList "></div>

    <div class="d-flex flex-column mx-auto my-auto bg-light rounded-3" style="width:50%;">

        <div class="d-flex flex-row mt-2 align-content-center  align-items-center flex-row bg-light rounded-3">
            <h5 class="p-4 text-muted">
                ENTER VEHICLE DETAILS
            </h5>
        </div>

        <form id="vehicle-create-form" asp-area="Employee" asp-controller="Vehicles" asp-action="RegisterVehicle" class="d-flex flex-column gap-1 p-4" method="post" style="width:100%;">
            <div class="d-flex flex-column form-group gap-1">
                <label asp-for="@Model.RegisterBrand">Vehicle Brand</label>
                <input asp-for="@Model.RegisterBrand" type="hidden" id="hiddenBrandInput" />
                <input id="createBrandInput" type="text" class="form-control" autocomplete="off" placeholder="Enter brand" required>
                <span asp-validation-for="@Model.RegisterBrand" style="height:14px;"></span>
            </div>
            <div class="d-flex flex-column form-group gap-1">
                <label asp-for="@Model.RegisterModel">Vehicle Model</label>
                <input asp-for="@Model.RegisterModel" type="hidden" id="hiddenModelInput" />
                <input id="createModelInput" type="text" class="form-control" autocomplete="off" placeholder="Enter model" required>
                <span asp-validation-for="@Model.RegisterBrand" style="height:14px;"></span>
            </div>
            <div class="d-flex flex-column form-group gap-1">
                <label asp-for="@Model.CreationYear">Production Year</label>
                <input id="productionInput" asp-for="@Model.CreationYear" type="number" class="form-control" min="0" pattern="\d{4}" placeholder="Enter year" required>
                <span asp-validation-for="@Model.CreationYear" style="height:14px;"></span>
            </div>
            <div class="d-flex flex-column form-group gap-1">
                <label asp-for="@Model.VIN">VIN Number</label>
                <input asp-for="@Model.VIN" type="text" class="form-control" autocomplete="off" placeholder="Enter vin" maxlength="17" required>
                <span asp-validation-for="@Model.VIN" style="height:14px;"></span>
            </div>
            <div class="d-flex flex-column form-group gap-1">
                <label asp-for="@Model.LicensePlate">License Plate</label>
                <input asp-for="@Model.LicensePlate" type="text" class="form-control" autocomplete="off" placeholder="Enter license plate number" required>
                <span asp-validation-for="@Model.LicensePlate" style="height:14px;"></span>
            </div>
            <div class="d-flex flex-column form-group gap-1">
                <label asp-for="@Model.CustomerEmail">Customer email</label>
                <input asp-for="@Model.CustomerEmail" type="email" class="form-control" aria-describedby="emailHelp" placeholder="Link to customer" required>
                <span asp-validation-for="@Model.CustomerEmail" style="height:14px;"></span>
            </div>

            <div class="d-flex justify-content-start gap-3 mt-4">
                <a asp-area="Employee" asp-controller="Home" asp-action="Index" class="btn btn-secondary ">Cancel</a>
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </form>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/dynamicList.js" asp-append-version="true"></script>

<script>

    $(document).ready(function () {

        var brandsDict = @Html.Raw(Json.Serialize(@Model.Brands.Select(brand => brand)));
        var brandData = {};
        brandsDict.forEach(function (brand) {
            var modelsData = {};
            brand.models.forEach(function (m) {
                modelsData[m.name] = m.id;
            });
            var data = {
                "id": brand.id,
                "models": modelsData
            };
            brandData[brand.name] = data;
        });

        // Zero out the production year input value
        $("#productionInput").val('');

        // Try replace the input value with the id on submit
        $("#vehicle-create-form button[type='submit']").on("click", function (event) {

            var brandSelectValue = $("#createBrandInput").val();
            var modelSelectValue = $("#createModelInput").val();

            console.log(brandSelectValue);
            console.log(modelSelectValue);

            if (brandData.hasOwnProperty(brandSelectValue)) {
                $("#hiddenBrandInput").val(brandData[brandSelectValue].id);
            }
            else {
                $("#hiddenBrandInput").val(brandSelectValue);
            }

            if (brandData.hasOwnProperty(brandSelectValue) && brandData[brandSelectValue].models.hasOwnProperty(modelSelectValue)) {
                $("#hiddenModelInput").val(brandData[brandSelectValue].models[modelSelectValue]);
            }
            else {
                $("#hiddenModelInput").val(modelSelectValue);
            }

            return true;
        });

        var brandNames = Object.keys(brandData).sort();
        var modelsList = [];

        subscribeToNameClickedCallback(function (name) {
            onBrandNameChanged();
        });

        // Display the brands container
        $("#createBrandInput").on("click", function () {
            displayMatchingNames(brandNames, "#createBrandInput", "#matchingNames");
        });
        $("#createBrandInput").on("input", function () {
            displayMatchingNames(brandNames, "#createBrandInput", "#matchingNames");
            onBrandNameChanged();
        });

        var onBrandNameChanged = function () {

            var brandInput = $("#createBrandInput");
            var modelInput = $("#createModelInput");
            // Check if the brand input is empty
            if (!brandInput.val().trim()) {
                // Clear and make the Model Input inactive
                modelInput.val('').prop('readonly', true);
                modelsList.length = 0;
            } else {
                // Enable the Model Input
                modelInput.prop('readonly', false);

                modelsList.length = 0;
                var brandName = brandInput.val();
                if (brandData.hasOwnProperty(brandName)) {
                    var brand = brandData[brandName];
                    var brandModels = Object.keys(brand.models);
                    modelsList = modelsList.concat(brandModels);
                }
                console.log(modelsList);
            }
        }

        // Display the models container
        $("#createModelInput").on("click", function () {
            displayMatchingNames(modelsList, "#createModelInput", "#matchingNames");
        });
        $("#createModelInput").on("input", function () {
            displayMatchingNames(modelsList, "#createModelInput", "#matchingNames");
        });

        // Hide brands/models container when click outside of it
        $(document).on("click", function (e) {
            var excludedElements = ["#createBrandInput", "#createModelInput"];
            // Check if the clicked element is not within the excluded elements
            if (!excludedElements.some(element => $(e.target).closest(element).length)) {
                $("#matchingNames").hide();
            }
        });
    });
</script>